name: Parsl

on:
  pull_request:
    types:
      - opened
      - synchronize

jobs:
  lint:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: "3.12"
      - name: Install requirements (...txt)
        run: |
          # libpython3.5: make workqueue binary installer happy
          # mpich: required by radical executor
          sudo apt-get update -q
          sudo apt-get install -qy libpython3.5 mpich

          make virtualenv
          source .venv/bin/activate
          python -m pip install -U pip
          make deps
      - name: Check for missing __init__ files
        run: |
          source .venv/bin/activate
          make lint
      - name: flake8
        run: |
          source .venv/bin/activate
          make flake8
      - name: mypy
        run: |
          source .venv/bin/activate
          make mypy

  main-test-suite:
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        test-name: [
            "local_thread_test",
            "htex_local_test",
            "htex_local_alternate_test",
            "wqex_local_test",
            "vineex_local_test",
            "radical_local_test",
            "config_local_test",
            "perf_test"
        ]
    runs-on: ubuntu-20.04
    timeout-minutes: 15

    steps:
    - uses: actions/checkout@master

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Collect Job Information
      id: job-info
      run: |
        echo "Python Version: ${{ matrix.python-version }}" >> ci_job_info.txt
        echo "CI Triggering Event: ${{ github.event_name }}" >> ci_job_info.txt
        echo "Triggering Git Ref: ${{ github.ref }}" >> ci_job_info.txt
        echo "Triggering Git SHA: ${{ github.sha }}" >> ci_job_info.txt
        echo "Workflow Run: ${{ github.run_number }}" >> ci_job_info.txt
        echo "Workflow Attempt: ${{ github.run_attempt }}" >> ci_job_info.txt
        as_ascii="$(echo "${{ github.ref_name }}" | perl -pe "s/[^A-z0-9-]+/-/g; s/^-+|-+\$//g; s/--+/-/g;")"
        echo "as-ascii=$as_ascii" >> $GITHUB_OUTPUT

    - name: Non-requirements based install
      run: |
        # libpython3.5: make workqueue binary installer happy
        # mpich: required by radical executor
        sudo apt-get update -q
        sudo apt-get install -qy libpython3.5 mpich

    - name: Install requirements (...txt)
      run: |
        make virtualenv
        source .venv/bin/activate
        python -m pip install -U pip
        make deps
        python -m pip install .
        python -m pip install .[monitoring,radical-pilot,visualization,proxystore]

    - name: make ${{ matrix.test-name }}
      run: |
        source .venv/bin/activate
        make ${{ matrix.test-name }}
        ln -s .pytest/parsltest-current test_runinfo
        find . -name "monitoring.db"

    - name: Checking parsl-visualize
      run: |
        if find . -type f -name "monitoring.db" | grep -q monitoring.db; then
          source .venv/bin/activate
          sudo apt-get install -qy graphviz
          parsl/tests/test-viz.sh
        fi

    - name: Archive runinfo logs
      uses: actions/upload-artifact@v4
      with:
        name: runinfo-${{ matrix.python-version }}-${{ matrix.test-name }}-${{ steps.job-info.outputs.as-ascii }}-${{ github.sha }}
        path: |
          runinfo/
          test_runinfo/
          ci_job_info.txt
        compression-level: 9

  documentation-checks:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
    - uses: actions/checkout@master
    - uses: actions/setup-python@v4
      with:
        python-version: "3.12"
    - name: Documentation checks
      run: |
        sudo apt-get update -q
        sudo apt-get install -qy pandoc
        make virtualenv
        source .venv/bin/activate
        python -m pip install -U pip
        python -m pip install .[docs]

        cd docs

        test ! -e stubs

        # check we can build the docs without warnings
        PYTHONPATH=/tmp/cctools/lib/python3.8/site-packages make SPHINXOPTS=-W html

        cd ..

        # assert that none of the runs in this test have put an ERROR message into a
        # database manager log file or monitoring router log file. It would be better if
        # the tests themselves failed immediately when there was a monitoring error, but
        # in the absence of that, this is a dirty way to check.
        bash -c '! grep ERROR .pytest/parsltest-current/runinfo*/*/database_manager.log'
        bash -c '! grep ERROR .pytest/parsltest-current/runinfo*/*/monitoring_router.log'
