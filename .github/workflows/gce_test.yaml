name: GlobusComputeExecutor tests

on:
  pull_request:
    types:
      - opened
      - synchronize

  workflow_dispatch:
    inputs:
      tags:
        description: 'Test scenario tags'
        required: false
        type: boolean

jobs:
  main-test-suite:
    strategy:
      matrix:
        python-version: ["3.11"]
    runs-on: ubuntu-20.04
    timeout-minutes: 60

    steps:
    - uses: actions/checkout@master

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Collect Job Information
      id: job-info
      run: |
        echo "Python Version: ${{ matrix.python-version }}" >> ci_job_info.txt
        echo "CI Triggering Event: ${{ github.event_name }}" >> ci_job_info.txt
        echo "Triggering Git Ref: ${{ github.ref }}" >> ci_job_info.txt
        echo "Triggering Git SHA: ${{ github.sha }}" >> ci_job_info.txt
        echo "Workflow Run: ${{ github.run_number }}" >> ci_job_info.txt
        echo "Workflow Attempt: ${{ github.run_attempt }}" >> ci_job_info.txt
        as_ascii="$(echo "${{ github.ref_name }}" | perl -pe "s/[^A-z0-9-]+/-/g; s/^-+|-+\$//g; s/--+/-/g;")"
        echo "as-ascii=$as_ascii" >> $GITHUB_OUTPUT

    - name: Non-requirements based install
      run: |
        # libpython3.5: make workqueue binary installer happy
        # mpich: required by radical executor
        sudo apt-get update -q
        sudo apt-get install -qy libpython3.5 mpich

    - name: setup virtual env
      run: |
        make virtualenv
        source .venv/bin/activate

    - name: make deps clean_coverage
      run: |
        source .venv/bin/activate
        make deps
        make clean_coverage
        # Installing parsl into venv required for GCendpoint
        pip3 install .

    - name: start globus_compute_endpoint
      env:
        GLOBUS_COMPUTE_CLIENT_ID: ${{ secrets.GLOBUS_COMPUTE_CLIENT_ID }}
        GLOBUS_COMPUTE_CLIENT_SECRET: ${{ secrets.GLOBUS_COMPUTE_SECRET_KEY }}
      run: |
        source .venv/bin/activate
        globus-compute-endpoint configure default
        cat << EOF > /home/runner/.globus_compute/default/config.yaml
        display_name: null
        engine:
          provider:
            type: LocalProvider
            init_blocks: 1
            max_blocks: 1
            min_blocks: 0
            worker_init: source /home/runner/work/parsl/parsl/.venv/bin/activate
          type: GlobusComputeEngine
        EOF
        globus-compute-endpoint start default
        globus-compute-endpoint list
    - name: make test
      env:
        GLOBUS_COMPUTE_CLIENT_ID: ${{ secrets.GLOBUS_COMPUTE_CLIENT_ID }}
        GLOBUS_COMPUTE_CLIENT_SECRET: ${{ secrets.GLOBUS_COMPUTE_SECRET_KEY }}
      run: |
        source .venv/bin/activate
        export GLOBUS_COMPUTE_ENDPOINT=$(globus-compute-endpoint list | grep default | cut -c 3-38)      
        echo "GLOBUS_COMPUTE_ENDPOINT = $GLOBUS_COMPUTE_ENDPOINT"

        # temporary; until test-matrixification
        export PARSL_TEST_PRESERVE_NUM_RUNS=7

        make gce_test
        ln -s .pytest/parsltest-current test_runinfo

    - name: Archive runinfo logs
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: runinfo-${{ matrix.python-version }}-${{ steps.job-info.outputs.as-ascii }}-${{ github.sha }}
        path: |
          runinfo/
          .pytest/
          ~/.globus_compute/default/
          ci_job_info.txt
        compression-level: 9
